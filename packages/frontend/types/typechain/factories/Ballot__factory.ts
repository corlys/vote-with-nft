/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Ballot, BallotInterface } from "../Ballot";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC721",
        name: "votingTokenAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "finalize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "open",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_chosen",
        type: "uint256",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610d39380380610d3983398181016040528101906100329190610176565b61004e61004361009560201b60201c565b61009d60201b60201c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506101fa565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050610170816101e3565b92915050565b60006020828403121561018857600080fd5b600061019684828501610161565b91505092915050565b60006101aa826101c3565b9050919050565b60006101bc8261019f565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6101ec816101b1565b81146101f757600080fd5b50565b610b30806102096000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630121b93f146100675780634bb278f314610083578063715018a61461008d5780638da5cb5b14610097578063f2fde38b146100b5578063fcfff16f146100d1575b600080fd5b610081600480360381019061007c9190610749565b6100db565b005b61008b6102eb565b005b6100956103d3565b005b61009f61045b565b6040516100ac9190610859565b60405180910390f35b6100cf60048036038101906100ca9190610720565b610484565b005b6100d961057c565b005b600460009054906101000a900460ff1661012a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161012190610874565b60405180910390fd5b60018060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016101869190610859565b60206040518083038186803b15801561019e57600080fd5b505afa1580156101b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d69190610772565b14610216576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020d906108b4565b60405180910390fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156102a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029a906108d4565b60405180910390fd5b60008114156102cc57600560000160008154809291906102c290610961565b91905055506102e8565b600560010160008154809291906102e290610961565b91905055505b50565b6102f3610615565b73ffffffffffffffffffffffffffffffffffffffff1661031161045b565b73ffffffffffffffffffffffffffffffffffffffff1614610367576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035e906108f4565b60405180910390fd5b600460009054906101000a900460ff166103b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ad90610874565b60405180910390fd5b6000600460006101000a81548160ff021916908315150217905550565b6103db610615565b73ffffffffffffffffffffffffffffffffffffffff166103f961045b565b73ffffffffffffffffffffffffffffffffffffffff161461044f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610446906108f4565b60405180910390fd5b610459600061061d565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61048c610615565b73ffffffffffffffffffffffffffffffffffffffff166104aa61045b565b73ffffffffffffffffffffffffffffffffffffffff1614610500576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f7906108f4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610570576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056790610894565b60405180910390fd5b6105798161061d565b50565b610584610615565b73ffffffffffffffffffffffffffffffffffffffff166105a261045b565b73ffffffffffffffffffffffffffffffffffffffff16146105f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ef906108f4565b60405180910390fd5b6001600460006101000a81548160ff021916908315150217905550565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000813590506106f081610acc565b92915050565b60008135905061070581610ae3565b92915050565b60008151905061071a81610ae3565b92915050565b60006020828403121561073257600080fd5b6000610740848285016106e1565b91505092915050565b60006020828403121561075b57600080fd5b6000610769848285016106f6565b91505092915050565b60006020828403121561078457600080fd5b60006107928482850161070b565b91505092915050565b6107a481610925565b82525050565b60006107b7601083610914565b91506107c2826109d9565b602082019050919050565b60006107da602683610914565b91506107e582610a02565b604082019050919050565b60006107fd601983610914565b915061080882610a51565b602082019050919050565b6000610820600d83610914565b915061082b82610a7a565b602082019050919050565b6000610843602083610914565b915061084e82610aa3565b602082019050919050565b600060208201905061086e600083018461079b565b92915050565b6000602082019050818103600083015261088d816107aa565b9050919050565b600060208201905081810360008301526108ad816107cd565b9050919050565b600060208201905081810360008301526108cd816107f0565b9050919050565b600060208201905081810360008301526108ed81610813565b9050919050565b6000602082019050818103600083015261090d81610836565b9050919050565b600082825260208201905092915050565b600061093082610937565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061096c82610957565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561099f5761099e6109aa565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f42616c6c6f7420697320636c6f73656400000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f566f746572204e465420646f6573206e6f742065786974737400000000000000600082015250565b7f416c726561647920766f74656400000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b610ad581610925565b8114610ae057600080fd5b50565b610aec81610957565b8114610af757600080fd5b5056fea26469706673582212207c5287eda63c84cc92b694c5fc1dcbfc766c9b66fa81eb2ede123cdad2f0f79464736f6c63430008040033";

type BallotConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BallotConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Ballot__factory extends ContractFactory {
  constructor(...args: BallotConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    votingTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Ballot> {
    return super.deploy(votingTokenAddress, overrides || {}) as Promise<Ballot>;
  }
  getDeployTransaction(
    votingTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(votingTokenAddress, overrides || {});
  }
  attach(address: string): Ballot {
    return super.attach(address) as Ballot;
  }
  connect(signer: Signer): Ballot__factory {
    return super.connect(signer) as Ballot__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BallotInterface {
    return new utils.Interface(_abi) as BallotInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Ballot {
    return new Contract(address, _abi, signerOrProvider) as Ballot;
  }
}
